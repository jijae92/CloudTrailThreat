"""Rule detecting environment secrets committed in code."""
from __future__ import annotations

from pathlib import Path
from typing import List, Optional

from ..result import Finding
from ..severity import Severity
from ..utils import code

RULE_ID = "ENV_SECRET_001"
RULE_DESCRIPTION = "Detect hardcoded environment secrets in Python modules."


def scan(source_path: Optional[str] = None, **_: object) -> List[Finding]:
    """Scan for obvious hard-coded secrets in Python files."""
    if not source_path:
        return []

    findings: List[Finding] = []
    path = Path(source_path)
    literals = code.extract_string_literals(str(path))
    for literal in literals:
        if "SECRET" in literal.upper() and len(literal) > 4:
            findings.append(
                Finding(
                    rule_id=RULE_ID,
                    description="Potential hardcoded secret literal detected.",
                    severity=Severity.HIGH,
                    resource_id=str(path),
                    remediation="Move secrets into a managed store or environment variable.",
                )
            )
            break
    return findings
